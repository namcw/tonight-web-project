/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.46
 * Generated at: 2017-10-27 01:04:23 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.views.room;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import accom.model.vo.RoomReview;
import member.model.vo.Member;
import java.util.ArrayList;
import java.sql.Date;

public final class roomReviewView_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("member.model.vo.Member");
    _jspx_imports_classes.add("accom.model.vo.RoomReview");
    _jspx_imports_classes.add("java.util.ArrayList");
    _jspx_imports_classes.add("java.sql.Date");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');

	Member member = (Member)session.getAttribute("member");

      out.write(' ');
      out.write('\n');


	ArrayList<RoomReview> list = (ArrayList<RoomReview>)request.getAttribute("list");
	int listCount = ((Integer)request.getAttribute("listCount")).intValue();
	int currentPage = ((Integer)request.getAttribute("currentPage")).intValue();
	int startPage = ((Integer)request.getAttribute("startPage")).intValue();
	int endPage = ((Integer)request.getAttribute("endPage")).intValue();
	int maxPage = ((Integer)request.getAttribute("maxPage")).intValue();

      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>roomReviewView</title>\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("\tfunction Review(){\n");
      out.write("\t\tlocation.href = \"views/room/roomReviewWriter.jsp\";\n");
      out.write("\t}\n");
      out.write("</script>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\n");
      out.write("<hr style=\"clear:both\">\n");
      out.write("<h2 align=\"center\">게시글 목록</h2>\n");
      out.write("<h3 align=\"center\">총 게시글 갯수 : ");
      out.print( listCount );
      out.write("</h3>\n");
      out.write("<br>\n");
 if(member != null){ 
      out.write("\n");
      out.write("\t<div align=\"center\">\n");
      out.write("\t<button onclick=\"Review();\">글쓰기</button>\n");
      out.write("\t</div>\n");
 } 
      out.write("\n");
      out.write("<br>\n");
      out.write("<table align=\"center\" border=\"1\" cellspacing=\"0\" width=\"700\">\n");
      out.write("<tr bgcolor=\"gray\"><th>번호</th><th>제목</th><th>작성자</th><th>날짜</th><th>조회수</th>\n");
      out.write("   <th>첨부파일</th></tr>\n");

	for(RoomReview review : list){

      out.write("\n");
      out.write("<tr>\n");
      out.write("\t<td align=\"center\">");
      out.print( review.getReviewNum());
      out.write("</td>\n");
      out.write("\t<td>\n");
      out.write("\t");
      out.write('\n');
      out.write('	');
      out.write('	');
 if(review.getReviewLevel() == 1){  //원글의 댓글일 때 
      out.write("\n");
      out.write("\t\t&nbsp; &nbsp; ▶\n");
      out.write("\t\t");
 }else if(review.getReviewLevel() == 2){  //댓글의 댓글일 때 
      out.write("\n");
      out.write("\t\t&nbsp; &nbsp; &nbsp; &nbsp; ▶▶\n");
      out.write("\t\t");
 } 
      out.write('\n');
      out.write('	');
      out.write('\n');
      out.write('	');
      out.write('	');
 if(member != null){ 
      out.write("\n");
      out.write("\t\t\t<a href=\"/tonight/rrdetail?rnum=");
      out.print( review.getReviewNum() );
      out.write("&page=");
      out.print( currentPage );
      out.write("\">\n");
      out.write("\t\t\t");
      out.print( review.getReviewTitle());
      out.write("\n");
      out.write("\t\t\t</a>\n");
      out.write("\t\t");
 }else{ 
      out.write("\n");
      out.write("\t\t\t");
      out.print( review.getReviewTitle());
      out.write('\n');
      out.write('	');
      out.write('	');
 } 
      out.write("\n");
      out.write("\t</td>\n");
      out.write("\t<td align=\"center\">");
      out.print( review.getReviewriter());
      out.write("</td>\n");
      out.write("\t<td align=\"center\">");
      out.print( review.getReviewDate() );
      out.write("</td>\n");
      out.write("\t<td align=\"center\">");
      out.print( review.getReviewReadCount() );
      out.write("</td>\n");
      out.write("\t<td align=\"center\">\n");
      out.write("\t\t");
 if(review.getReviewOriginalFileName() != null){ 
      out.write("\n");
      out.write("\t\t\t◎\n");
      out.write("\t\t");
 }else{ 
      out.write("\n");
      out.write("\t\t\t&nbsp;\n");
      out.write("\t\t");
 } 
      out.write("\n");
      out.write("\t</td>\n");
      out.write("</tr>\n");
  } 
      out.write("\n");
      out.write("</table>\n");
      out.write("<br>\n");
      out.write("\n");
      out.write("<div align=\"center\">\n");
      out.write('\n');
 if(currentPage <= 1){ 
      out.write("\n");
      out.write("\t[이전] &nbsp;\n");
 }else{ 
      out.write("\n");
      out.write("\t<a href=\"/tonight/rreview?page=");
      out.print( currentPage - 1 );
      out.write("\">[이전]</a>\n");
 } 
      out.write('\n');
      out.write('\n');
 for(int p = startPage; p <= endPage; p++){ 
		if(p == currentPage){

      out.write("\n");
      out.write("\t<b><font size=\"4\" color=\"red\">[");
      out.print( p );
      out.write("]</font></b>\n");
     }else{ 
      out.write("\n");
      out.write("\t<a href=\"/tonight/rreview?page=");
      out.print( p );
      out.write('"');
      out.write('>');
      out.print( p );
      out.write("</a>\n");
 }} 
      out.write('\n');
      out.write('\n');
 if(currentPage >= maxPage){ 
      out.write("\n");
      out.write("\t[다음]\n");
 }else{ 
      out.write("\n");
      out.write("\t<a href=\"/tonight/rreview?page=");
      out.print( currentPage + 1 );
      out.write("\">[다음]</a>\n");
 } 
      out.write("\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("<br><br><br>\n");
      out.write("</body>\n");
      out.write("</html>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
